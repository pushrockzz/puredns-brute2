name: Puredns Bruteforce Worker 

on:
  workflow_dispatch:
    inputs:
      primary_repo_owner:
        description: 'The owner of the primary repository.'
        required: true
        type: string
      primary_repo_name:
        description: 'The name of the primary repository.'
        required: true
        type: string
      primary_run_id:
        description: 'The run ID of the main workflow.'
        required: true
        type: string
      chunk_package_artifact_name:
        description: 'The name of the artifact package.'
        required: true
        type: string
      secondary_matrix_json:
        description: 'The JSON string for the matrix assigned to this worker.'
        required: true
        type: string

permissions:
  contents: write # For checkout
  actions: read   # To read artifacts from another repo

jobs:
  process_assigned_chunks:
    name: Process Assigned Bruteforce Chunks
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        # Use credentials for your container registry
        username: ${{ secrets.GHCR_USER }}
        password: ${{ secrets.GHCR_TOKEN }}
    strategy:
      fail-fast: false
      max-parallel: 20
      # The matrix is populated by the JSON string passed from the primary workflow
      matrix:
        pair: ${{ fromJson(github.event.inputs.secondary_matrix_json && github.event.inputs.secondary_matrix_json || '[]') }}
    steps:
      - name: Display Trigger Payload (Debug)
        run: |
          echo "WORKER: Received payload:"
          echo "${{ toJson(github.event.inputs) }}"
          echo "---"
          echo "WORKER: My assigned chunk for this job instance:"
          echo "${{ toJson(matrix.pair) }}"

      - name: Checkout repository (this worker's repo)
        uses: actions/checkout@v3

      - name: Download Full Chunks Package from Primary Account
        env:
          # This secret must be configured in the repository where this workflow runs
          GH_TOKEN_PRIMARY_ACCOUNT_READ: ${{ secrets.PAT_FOR_PRIMARY_ACCOUNT_READ }}
          PRIMARY_REPO: ${{ github.event.inputs.primary_repo_owner }}/${{ github.event.inputs.primary_repo_name }}
          PRIMARY_RUN_ID: ${{ github.event.inputs.primary_run_id }}
          ARTIFACT_NAME: ${{ github.event.inputs.chunk_package_artifact_name }}
        shell: bash
        run: |
          echo "WORKER: Downloading artifact '$ARTIFACT_NAME' from '$PRIMARY_REPO', run ID '$PRIMARY_RUN_ID'"
          
          # Check for gh CLI and install if not present
          if ! command -v gh &> /dev/null; then
            echo "INFO: gh CLI not found. Installing..."
            (apt-get update -qy && apt-get install -qy curl && \
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \
            chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg && \
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
            apt-get update -qy && apt-get install -qy gh) || { echo "::error:: gh CLI installation failed."; exit 0; }
          fi

          if ! command -v gh &> /dev/null; then
            echo "::error:: gh CLI is not available after attempting installation."
            exit 0
          fi

          # CRITICAL FIX: Explicitly log in to GitHub using the provided PAT.
          # This ensures the subsequent 'gh' command is properly authenticated.
          echo "$GH_TOKEN_PRIMARY_ACCOUNT_READ" | gh auth login --with-token
          if [ $? -ne 0 ]; then
             echo "::error:: gh auth login failed. The PAT may be incorrect or lack necessary permissions."
             exit 0
          fi

          # Now, this download command will use the authenticated session
          gh run download "$PRIMARY_RUN_ID" -R "$PRIMARY_REPO" -n "$ARTIFACT_NAME" --dir .
          
          PACKAGE_FILENAME="$ARTIFACT_NAME.tar.gz"
          if [ ! -f "$PACKAGE_FILENAME" ]; then
            echo "::error:: Failed to download '$PACKAGE_FILENAME'. The artifact may not exist or the name is incorrect."
            exit 0
          fi
          echo "SUCCESS: Downloaded '$PACKAGE_FILENAME'."

      - name: Extract Bruteforce Package
        shell: bash
        run: |
          PACKAGE_FILENAME="${{ github.event.inputs.chunk_package_artifact_name }}.tar.gz"
          echo "TERTIARY WORKER: Extracting $PACKAGE_FILENAME..."
          tar -xzvf "$PACKAGE_FILENAME"
          if [ ! -d "chunks" ] || [ ! -f "targets.txt" ] || [ ! -f "resolvers-trusted.txt" ]; then
            echo "::error:: 'chunks/', 'targets.txt', or 'resolvers-trusted.txt' missing after extraction."
            exit 0
          fi
          echo "SUCCESS: Extraction complete."

      - name: Install Tools
        run: |
          # Installing smap
          if ! command -v smap >/dev/null; then
            echo "Installing smap…"
            go install -v github.com/s0md3v/smap/cmd/smap@latest
          else
            echo "smap already in cache"
          fi    
          # Installing inscope
          if ! command -v inscope >/dev/null; then
            echo "Installing inscope…"
            go install -v github.com/tomnomnom/hacks/inscope@latest
          else
            echo "inscope already in cache"
          fi    
          
          if ! command -v anew >/dev/null; then
            echo "Installing anew…"
            go install -v github.com/tomnomnom/anew@latest
          else
            echo "anew already in cache"
          fi
          
          if ! command -v cut-cdn >/dev/null; then
            echo "Installing cut-cdn…"
            go install github.com/ImAyrix/cut-cdn@latest
          else
            echo "cut-cdn already in cache"
          fi     

          if ! command -v naabu >/dev/null; then
            echo "Installing naabu…"
            go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
          else
            echo "naabu already in cache"
          fi

          pip3 install --no-cache-dir ipaddress
          
          echo "$HOME/go/bin" >> $GITHUB_PATH
          
      - name: Resolve Discovered Subdomains with PureDNS
        id: run_puredns
        shell: bash
        run: |
          DOMAIN="${{ matrix.pair.domain }}"
          CHUNK_FILE="${{ matrix.pair.chunk }}"
          PUREDNS_FILE="puredns_file.txt"
          # Define all filenames as requested
          RESOLVED_FILE="puredns_resolved.txt"
          MASSDNS="massdns.txt"
          MASSDNS_FILE="massdns_file.txt"
          TMP_CLEANMASSDNS=$(mktemp)
          
          echo "INFO: Resolving subdomains for '$DOMAIN' using chunk '$CHUNK_FILE'..."
          # The puredns command is now updated with --write-massdns
          cat "$CHUNK_FILE" | puredns bruteforce "$DOMAIN" \
            -r resolvers-trusted.txt \
            --rate-limit 5000 \
            --skip-validation \
            --skip-wildcard-filter \
            --write "$PUREDNS_FILE" \
            --write-massdns "$MASSDNS" \
            --quiet
          
          if [ ! -s "$PUREDNS_FILE" ]; then
            echo "INFO: No subdomains were resolved. Exiting this job."
            # Create empty files to prevent downstream errors
            touch "$RESOLVED_FILE" "$MASSDNS_FILE" "$PUREDNS_FILE"
            exit 0
          fi
          
          echo "✅ PureDNS resolution complete. $(wc -l < "$PUREDNS_FILE") subdomains were successfully resolved."
                 
          wget -qO .scope https://raw.githubusercontent.com/Pcoder7/puredns-bruteforce/refs/heads/main/.scope
          
          echo "Checking scope file for '$DOMAIN'..."
          cat .scope | head -n5
          
          cat "$PUREDNS_FILE" | inscope -s .scope > "$RESOLVED_FILE" || true

          if [ ! -s "$MASSDNS" ]; then
            echo "INFO: MassDNS file is empty. Skipping enrichment."
            touch "$MASSDNS_FILE"
            exit 0
          fi

          awk 'NF { sub(/\.$/,"",$1); print }' "$MASSDNS" > "$TMP_CLEANMASSDNS"

          awk ' \
          {gsub(/\r$/,"");sub(/^[ \t]+/,"");sub(/[ \t]+$/,"")} \
          FNR==NR{if($0)patterns[++c]=$0;next} \
          !setup{regex="";for(i=1;i<=c;i++){regex=regex (i>1?"|":"") "("patterns[i]")"};if(regex=="")regex="^\b$";setup=1} \
          $2=="A" && $1~regex \
          ' .scope "$TMP_CLEANMASSDNS" | anew -q "$MASSDNS_FILE"
          
          echo "✅ MassDNS processing complete. $(wc -l < "$MASSDNS_FILE") in-scope A-records found."
          
          rm -f "$TMP_CLEANMASSDNS" "$MASSDNS"

      - name: Map subdomains to ports with CDN filtering
        id: map_subdomains_cdn
        shell: bash
        run: |
          # This block is nearly identical to your provided logic, ensuring it runs as intended.
          set -e
          trap '' SIGPIPE

          MASSDNS_FILE="massdns_file.txt"
          SMAP_FILE="smap.txt"
          OUTPUT="subdomain_ports.txt"
          
          if [ ! -s "$MASSDNS_FILE" ]; then
            echo "INFO: massdns_file.txt is empty. Skipping port mapping."
            touch "$OUTPUT"
            exit 0
          fi
          
          TMP_IP2SUB=$(mktemp)
          TMP_IP_ONLY=$(mktemp)
          TMP_NONCDN=$(mktemp)
          TMP_CDN=$(mktemp)
          TMP_SMAP_NONCDN=$(mktemp)
          TMP_RUSTSCAN=$(mktemp)

          echo "▶ Cleaning & extracting A‑records from $MASSDNS_FILE…"
          awk '{ print $3, $1 }' "$MASSDNS_FILE" | sort -k1,1 > "$TMP_IP2SUB"

          echo "▶ Pulling unique IPs…"
          cut -d' ' -f1 "$TMP_IP2SUB" | sort -u > "$TMP_IP_ONLY"

          echo "▶ Filtering non‑CDN IPs with cut-cdn…"
          cat "$TMP_IP_ONLY" | cut-cdn -ua -t 50 -silent -o "$TMP_NONCDN"

          echo "▶ Deriving CDN IP list…"
          cat "$TMP_IP_ONLY" | anew -d "$TMP_NONCDN" > "$TMP_CDN"

          echo "▶ Running rustscan on non‑CDN IPs…"
          rustscan -a "$TMP_NONCDN" -p 80,443 --no-banner -t 1000 --tries 1 -u 20000 --scan-order "Random" -b 100 --greppable --accessible > "$TMP_RUSTSCAN" || true
          cat "$TMP_RUSTSCAN" | awk -F ' -> ' '{ gsub(/[\[\]]/, "", $2); n = split($2, p, ","); for(i=1;i<=n;i++) print $1 ":" p[i] }' | anew -q "$TMP_SMAP_NONCDN" || true
          
          echo "▶ Merging non‑CDN and CDN IP lists into $SMAP_FILE…"
          cat "$TMP_SMAP_NONCDN" "$TMP_CDN" | sort -u > "$SMAP_FILE"

          echo "▶ Joining with $SMAP_FILE to produce final output..."
          awk -F: '
            NF==2 { print $1, $2 }
            NF==1 { print $1, ""  }
          ' "$SMAP_FILE" \
            | sort -k1,1 \
            | join - "$TMP_IP2SUB" \
            | { 
              awk '
                NF >= 2 { 
                  if (NF == 3 && $2 ~ /^[0-9]+$/) { 
                    print $3 ":" $2 
                  } else { 
                    print $NF 
                  } 
                }
              '       
            } \
            > "$OUTPUT"

          echo "✅ Generated $OUTPUT with $(wc -l < $OUTPUT) entries."
          rm -f "$TMP_IP2SUB" "$TMP_IP_ONLY" "$TMP_NONCDN" "$TMP_CDN" "$TMP_SMAP_NONCDN" "$TMP_RUSTSCAN"

      - name: Sort Resolved Results into Root Domain Folders
        shell: bash
        run: |
          DOMAIN="${{ matrix.pair.domain }}"
          RESOLVED_FILE="puredns_resolved.txt"
          PORTS_INPUT_FILE="subdomain_ports.txt"
        
          mkdir -p "results/$DOMAIN"
          
          if [ -s "$RESOLVED_FILE" ]; then
            echo "  -> Copying puredns results for '$DOMAIN'"
            cp "$RESOLVED_FILE" "results/$DOMAIN/puredns_results.txt"
          fi

          if [ -s "$PORTS_INPUT_FILE" ]; then
            echo "  -> Copying port data for '$DOMAIN'"
            cp "$PORTS_INPUT_FILE" "results/$DOMAIN/subdomain_ports.txt"
          fi

      - name: Create Safe Name for Artifact
        id: safe_name
        shell: bash
        run: |
          SAFE_NAME=$(echo "${{ matrix.pair.domain }}_${{ matrix.pair.chunk }}" | tr '/.' '_')
          echo "safe_name=$SAFE_NAME" >> $GITHUB_OUTPUT
      
      - name: Upload Results Artifact
        uses: actions/upload-artifact@v4
        with:
          name: bruteforce-results-primary-${{ steps.safe_name.outputs.safe_name }}
          # Upload the entire results directory for this job
          path: results/
          retention-days: 1

  merge_results:
    name: Merge All Bruteforce Results
    runs-on: ubuntu-latest
    needs: process_assigned_chunks_tertiary
    if: always() # Run even if some runners fail to merge partial results
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download all result artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: 'bruteforce-results-*'
          path: temp-results
          merge-multiple: true

      # --- THIS IS THE NEW, CORRECT CONSOLIDATION STEP ---
      - name: Consolidate all results
        id: consolidate
        shell: bash
        run: |
          # Create the final destination directory
          mkdir -p final_results
          
          # Check if any artifacts were downloaded at all
          if [ ! -d "temp-results" ] || [ -z "$(ls -A temp-results)" ]; then
            echo "::warning:: No result artifacts were found to merge."
            exit 0
          fi
          
          echo "INFO: Aggregating all downloaded results into final folders..."
          
          # --- Process puredns_results.txt files ---
          # 1. Find all files with this name anywhere inside temp-results
          for filepath in $(find temp-results -type f -name "puredns_results.txt"); do
            # 2. Get the parent directory name (which is the root domain, e.g., "navy.mil")
            parent_domain=$(basename "$(dirname "$filepath")")
            # 3. Create a corresponding directory in our final output
            mkdir -p "final_results/$parent_domain"
            # 4. Append the contents of the found file to the final, consolidated file
            cat "$filepath" >> "final_results/$parent_domain/puredns_results.txt"
          done

          # --- Process subdomain_ports.txt files (same logic) ---
          for filepath in $(find temp-results -type f -name "subdomain_ports.txt"); do
            parent_domain=$(basename "$(dirname "$filepath")")
            mkdir -p "final_results/$parent_domain"
            cat "$filepath" >> "final_results/$parent_domain/subdomain_ports.txt"
          done
          
          echo "INFO: De-duplicating all aggregated files..."
          # 5. Find every .txt file in the final output directory
          for final_file in $(find final_results -type f -name "*.txt"); do
              # 6. Sort it in-place to remove duplicates
              sort -u -o "$final_file" "$final_file"
          done

          echo "✅ Successfully consolidated and de-duplicated results from all accounts."
          echo "Final directory structure:"
          ls -R final_results

      - name: Upload Final Consolidated Artifact
        # This step doesn't need to change
        uses: actions/upload-artifact@v4
        with:
          name: final-bruteforce-results
          path: final_results/
          retention-days: 1          
